# Android KeyStore

* ref: <https://github.com/KetanBhangale/Android-Keystore-Example>

* Android Keystore: protect keys in a "container". Once in the keystore, keys
  can be used for cryptographic operations WITH THE KEY MATERIAL REMAINING
  NON-EXPORTABLE and offers facilities to restrict when and how keys can be
  used (require user authentication, restrict keys to be used only in certain
  cryptographic modes).
* Symmmetric Encryption:
  - API level >=23: KeyStore API generates random AES keys Using KeyGenParameter specs.
  - API level  <23: KeyPairGeneratorSpec API used to generate public and private key,
    using RSA encryption.

  ```
  | import android.security.keystore.KeyGenParameterSpec
  | import android.security.keystore.KeyProperties
  | import java.security.KeyStore
  | import javax.crypto.Cipher
  | import javax.crypto.KeyGenerator
  | import javax.crypto.SecretKey
  | import javax.crypto.spec.IvParameterSpec
  | 
  | val AndroidKeyStore = "AndroidKeyStore"
  | private fun preSetup() { // <····· Generate keys in AndroidKeyStore
  |   val keyGenerator = KeyGenerator.getInstance(
  |         KeyProperties.KEY_ALGORITHM_AES, AndroidKeyStore)
  |   val keyGeneratorSpec = KeyGenParameterSpec
  |         .Builder( "myKey01",
  |            KeyProperties.PURPOSE_ENCRYPT )
  |   // or    KeyProperties.PURPOSE_DECRYPT 
  |       .setBlockModes(KeyProperties.BLOCK_MODE_CBC)
  |   //   └───────────┴─ specifict to Key purpose/Algorithm
  |       .setEncryptionPaddings(KeyProperties.ENCRYPTION_PADDING_PKCS7)
  |       .setUserAuthenticationRequired(false)
  |       .build()
  |   keyGenerator.init(keyGeneratorSpec)
  |   keyGenerator.generateKey()    // <···· keep safe in AndroidKeyStore!!!
  |  }
  | 
  |  private fun getKey(): SecretKey {
  |      val keyStore = KeyStore.getInstance(AndroidKeyStore)
  |      keyStore.load(null)
  |      val secreteKeyEntry: KeyStore.SecretKeyEntry =
  |         keyStore.getEntry("myKey01", null) as KeyStore.SecretKeyEntry
  |      return secreteKeyEntry.secretKey
  |  }
  | 
  |  private fun getEncryptedDataPair() 
  |      : Pair<ByteArray, ByteArray> {
  |    val cipher = Cipher.getInstance("AES/CBC/PKCS7Padding")
  |    // Init chipher with given Key in AndroidKeyStore
  |    cipher.init(Cipher.ENCRYPT_MODE, getKey())
  |    val encryptedData = cipher
  |      .doFinal("plain text".toByteArray(Charsets.UTF_8))
  |    return Pair(_iv, encryptedData)
  |  }
  ```
